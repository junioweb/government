org: thorgus

service: government

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-wsgi

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - venv/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: "forms-table-${self:custom.stage}"
  wsgi:
    app: application.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  domains:
    prod: government.fernandojr.dev
    staging: staging.government.fernandojr.dev
    dev: dev.government.fernandojr.dev
  customDomain:
    basePath: ""
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: "${self:custom.stage}"
    createRoute53Record: true

provider:
  name: aws
  runtime: python3.6
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource:
        - { "Fn::GetAtt": ["FormsDynamoDBTable", "Arn" ] }
  environment:
    FORMS_TABLE: ${self:custom.tableName}

functions:
  getForm:
    handler: wsgi_handler.handler
    events:
      - http:
          path: "/forms/{proxy+}"
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
            scopes:
              - government.${self:custom.stage}/form.read
  createForm:
    handler: wsgi_handler.handler
    events:
      - http:
          path: "/forms"
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
            scopes:
              - government.${self:custom.stage}/form.create
  listForm:
    handler: wsgi_handler.handler
    events:
      - http:
          path: "/forms"
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
            scopes:
              - government.${self:custom.stage}/form.read
  updateForm:
    handler: wsgi_handler.handler
    events:
      - http:
          path: "/forms/{proxy+}"
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
            scopes:
              - government.${self:custom.stage}/form.update
  deleteForm:
    handler: wsgi_handler.handler
    events:
      - http:
          path: "/forms/{proxy+}"
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
            scopes:
              - government.${self:custom.stage}/form.delete

resources:
  Resources:
    FormsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: "government-user-${self:custom.stage}"
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: "AWS::ApiGateway::Authorizer"
      Properties:
        Name: cognito-${self:custom.stage}-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
